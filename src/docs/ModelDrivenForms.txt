Model Driven Forms

For Model Driven forms we need to import the ReactiveFormsModule into our application.
One of the main criticisms of template Based Forms is that while they are easy to create, and follow patterns establishe in Angular 1, they are difficult to test, and difficult to manage programmatically, due to the fact that the component is not involved in setting up or manageing the structure of objects that manage the form. Model driven forms take the opposit approach; all of the form managemenrt objects are created programmatically in the component class itself. 

However, behind the scenes, it is the same set of objects that are used to perform the management, instances of FormGroup and FormControl. The difference is where the responsibilty lies for construction and management of these objects.

We will start with the same bare html as used in the template driven example.

<form>  ///md-simple.component.html
	<div>
		<label for="fname">First Name</label>
		<input type="text" id="fname" placeholder="First Name">
	</div>
	<div>
		<label for="lname">Last Name</label>
		<input type="text" id="lname" placeholder="Last Name">
	</div>

	<div>
    <label>Address</label>
		<div>
			<label for="addr">Street</label>
			<input type="text" id="street" placeholder="Street">
		</div>
		<div>
			<label for="city">City</label>
			<input type="text" id="city" placeholder="City">
		</div>
	</div>

    <button type="submit" class="btn btn-default">Submit</button>
</form>

and our component class starts off plain.

import { Component, OnInit } from '@angular/core';

@Component({
  selector: 'md-simple',
  templateUrl: './md-simple.component.html',
  styleUrls: ['./md-simple.component.css']
})
export class MdSimpleComponent implements OnInit {

  constructor() { }

  ngOnInit() {
  }

}

As with the template driven approach, we create a tree structure comprised of FormControl and FormGroup classes. Each of these contains a set of flags such as valid, pristine as well as a value property. The FormControl reflects the stae of a single control, the FormGroup reflects the state of all of the collection of FormControl objects that it contains.

So our simple page would need a hierarchy of FormGroup and FormCOntrol objects created as follows:

import { FormGroup, FormControl } from '@angular/forms';
...
    theForm: FormGroup;

    ngOnInit() {
        this.theForm = new FormGroup({
            firstName: new FormControl(''),
            lastName: new FormControl(''),
            address: new FormGroup({
                street: new FormControl(''),
                city: new FormControl
            })
        });
    }
...

as we can see, each form control can take a string as a constructor parameter, this is used as an initial value for a control. Each form group is constructed with an instance of an object with named properties, each being either a FormControl or a FormGroup.

So now we have the structure, we need to associate it with the form elemnts. This is achieved using the formGroup binding at the root form element, and formControlName, formGroupName directives which associate each element with a named property (FormControl or FormGroup instance respectively) in the object structure. 

So we would have:

<form [formGroup]="theForm" (ngSubmit)="onSubmit()">
	<div>
		<label for="fname">First Name</label>
		<input type="text" id="fname" placeholder="First Name" formControlName="firstName">
	</div>
	<div>
		<label for="lname">Last Name</label>
		<input type="text" id="lname" placeholder="Last Name" formControlName="lastName">
	</div>

	<div formGroupName="address">
		<label>Address</label>
		<div>
			<label for="addr">Street</label>
			<input type="text" id="street" placeholder="Street" formControlName="street">
		</div>
		<div>
			<label for="city">City</label>
			<input type="text" id="city" placeholder="City" formControlName="city">
		</div>
	</div>

	<button type="submit" class="btn btn-default">Submit</button>

</form>

Note that we no longer need to pass a reference to "theForm" as a parameter to the onSubmit method as the component already has access to it.

Validation

Model Driven forms use the same set of validators as Templte Driven forms do, except they are programmatically attached to FormControl objects programmatically in the component rather than automatically by using attributes in the form elements.

We import Validators from the forms module and attach the validator(s) as a second parameter in the FormControl constructor.

e.g. 
        this.theForm = new FormGroup({
            firstName: new FormControl('', Validators.required),
            lastName: new FormControl('', [Validators.required, Validators.maxLength(5)]),
            address: new FormGroup({
                street: new FormControl(''),
                city: new FormControl
            })
        });


and we can error messages to the template in the same way as we did with the template driven example,

	<div>
		<label for="fname">First Name</label>
		<input type="text" id="fname" placeholder="First Name" formControlName="firstName">
		<div [hidden]="!theForm.controls.firstName.errors?.required || theForm.controls.firstName.pristine" class="alert alert-danger">
			First Name is required
		</div>
	</div>

Instead of the hidden class we could use the ngIf directive:
		<div *ngIf="theForm.controls.firstName.errors?.required && theForm.controls.firstName.touched">

The controls property also exposes a get method so we could use:
		theForm.controls.get('firstName').errors?.required

Or even use the hasErrors method, as we saw in the template driven example: 
		theForm.controls.get('firstName').hasError('required')


FormBuilder

If you think writing the FormGroup/FormComponent structure is verbose, the FormBuilder, a helper class that provides a (slightly) simpler api.

constructor(private formBuilder: FormBuilder){}

....

        this.theForm = this.formBuilder.group({
            firstName: ['', Validators.required],
            lastName: ['', [Validators.required, Validators.maxLength(5)]],
            address: this.formBuilder.group({
                street: [''],
                city: ['']
            })
        });

Component Aggregation

As mentioned in the template driven forms commentary, there is no magic hookups that take place when a child component with template driven markup is included in a parent form. As the only options I can think of, require building FormGroups and Form Controls explicitly, I will cover that here.

As with a single form, the child component needs both a FormGroup/FormControl hierarchy, and appropriate FormGroupName FormControlName directives in the template.

As an example, let's create an address component, and remove the address input elements from the main form.
  
we have: 

<div [formGroup]="formGroup"> //address.component.html
	<div>
		<label for="addr">Street</label>
		<input type="text" id="street" placeholder="street" formControlName="street">
		<div [hidden]="!formGroup.controls.street.errors?.required || formGroup.controls.street.pristine"
			class="alert alert-danger">
			Street is required
		</div>

	</div>
	<div>
		<label for="addr">City</label>
		<input type="text" id="city" placeholder="City" formControlName="city">
		<div [hidden]="!formGroup.controls.city.errors?.required || formGroup.controls.city.pristine"
			class="alert alert-danger">
			City is required
		</div>
	</div>
</div>

and the associated section of the parent form is now:

	<div>
		<label>Address</label>
		<address [formGroup]="theForm.controls.address"></address>
	</div>

So what's going on here? Well the address template looks very similar to our original parent form, we have the main div bound to a FormGroup and each of the input text elements have a formControlName associating themselves with FormControl objects within the FormGroup.

If we look at address component class we see:

  @Input('formGroup')
  formGroup: FormGroup;
	
  ngOnInit() {
    this.formGroup.addControl('street', new FormControl('', Validators.required));
    this.formGroup.addControl('city', new FormControl('', Validators.required));
  }
 	
Whereas we instantiated an instance of the root FormGroup in the main form, here we are adding our FormControl objects to an instance of the FormGroup class that is passed in as an Input property (using [formGroup]="theForm.controls.address" in the main form template). The address FormGroup having been created oin the main page component class

        this.theForm = this.formBuilder.group({
            firstName: ['', Validators.required],
            lastName: ['', [Validators.required, Validators.maxLength(5)]],
            address: this.formBuilder.group({})

			




