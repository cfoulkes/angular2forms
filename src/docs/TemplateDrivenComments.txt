For Template Driven Form management Angular 2 provides directives that can be applied to a form and its elements to manage the data that the form represents.

Starting with a very simple form. 

<form>
	<div>
        <label for="fname">First Name</label>
        <input type="text" id="fname" placeholder="First Name">
	</div>
</form>

At the root is Template Driven Form management is the NgForm directive which is automatically applied to each form in an application when the FormsModule is imported. The NgForm manages the state of the form and all of the controls registered to it.

To see the contents of the ngForm instance, we can access it as a local template variable: and display its value using interpolation expressions:

<form #theForm="ngForm">
	<div>
        <label for="fname">First Name</label>
        <input type="text" id="fname" placeholder="First Name">
	</div>
</form>
<p>Form Value: {{theForm.value | json}}</p>

As we have registered no controls with the form, the output displays as:

Form Value: {}

We can also access the NgForm object in the Component class using @ViewChild:

  @ViewChild('theForm')
  ngForm: NgForm;

or:

  @ViewChild(NgForm)
  ngForm: NgForm;

The output from following log statement shows the structure of the NgForm object

  ngOnInit() {
    console.log(this.ngForm);
  }

giving:
NgForm {_submitted: false, ngSubmit: EventEmitter, form: FormGroup}

So the NgForm actually consists of the _submitted boolean property, the ngSubmit EventEmitter and an instance of the FormGroup class. The NgForm also exposes getter properties to access information about the state of the form, these generally access data in the FormGroup.

control: (...)
controls: (...)
dirty: (...)
disabled: (...)
enabled: (...)
errors: (...)
formDirective: (...)
invalid: (...)
path: (...)
pending: (...)
pristine: (...)
statusChanges: (...)
submitted: (...)
touched: (...)
untouched: (...)
valid: (...)
value: (...)
valueChanges: (...)


So far we have a form but it manages no controls. We add a control by using the ngModel directive along with the name attribute.

<form #theForm="ngForm">
	<div>
        <label for="fname">First Name</label>
        <input type="text" id="fname" placeholder="First Name" ngModel name="firstName">
	</div>
</form>
<p>Form Value: {{theForm.value | json}}</p>


The theForm.Value now shows a single property with an initial value of an empty string:

Form Value: { "firstName": "" }

Typing data into the First Name input text box is immediately reflected in the interpolation output. If we display other properties through interpolation we would see them alter as well. 

Looking in the controls collection in the log output we would see:

controls: Object
    firstName: FormControl

And by expanding the FormControl object we would see that it contains a value property, status properties, validator properties and the same set of getter properties that were exposed by the NgForm class. 

We can access these properties in the html by exposing another local template variable.

...
		<input type="text" id="fname" placeholder="First Name" #fn="ngModel" ngModel name="firstName">
...
<p>First Name Value: {{fn.value | json}}</p>
<p>First Name Dirty: {{fn.dirty}}</p>


As we add the ngModel directive (and name) to the an input element of the form, a new FormControl object is added to the control collection in the forms FormGroup. 

The FormGroup class is also an instance of FormControl, and so the controls within a page may be grouped into sub-groups. This is achieved by applying the ngModelGroup directive to a container element. 

<form #theForm="ngForm">
	<div>
		<label for="fname">First Name</label>
		<input type="text" id="fname" placeholder="First Name" #fn="ngModel" ngModel name="firstName">
	</div>

	<div ngModelGroup="address" #address="ngModelGroup">
		<div>
			<label for="addr">Street</label>
			<input type="text" id="street" placeholder="Street" ngModel name="street">
		</div>
		<div>
			<label for="addr">City</label>
			<input type="text" id="city" placeholder="City" ngModel name="city">
		</div>
	</div>
</form>

<p>Form Value: {{theForm.value | json}}</p>
<p>Form Dirty: {{theForm.dirty}}</p>
<p>FirstName Value: {{fn.value | json}}</p>
<p>FirstName Dirty: {{fn.dirty | json}}</p>
<p>Address Value: {{address.value | json}}</p>
<p>Address Dirty: {{address.dirty | json}}</p>

The ouput from the form value expression now produces:
Form Value: { "firstName": "", "address": { "street": "", "city": "" } }

and the control list in the log output shows:

controls: Object
    address: FormGroup
    ...
        controls: Object
            city: FormControl
            street: FormControl
    ...
    firstName: FormControl
...
